  
#define CLOCK_PIN 4
#define CLOCK_PORT_PIN (1 << CLOCK_PIN)
#define DATA_PIN 3
#define DATA_PORT_PIN (1 << DATA_PIN)
#define KEYBOARD_READ_PIN 2
#define RESET_PIN 5

#define WRITE_DELAY 1

#define CHAR_BUFFER_SIZE 1024

unsigned const char scancodes[] = {
  0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xe6, 0x0, 0xda, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xeb, 0xf5, 0xf4, 0xf2, 0x0, 0x0, 0x0, 0x0, 0xf0, 0x0, 0xf6, 0x0, 0x0, 0x0, 0x0, 0xa9, 0x96, 0xd2, 0xa6, 0xa5, 0xae, 0xbd, 0x52, 0xc6, 0xc5, 0xfc, 0xf9, 0x41, 0x7b, 0x49, 0x4a, 0x45, 0xe9, 0x1e, 0xfa, 0x25, 0xf3, 0x36, 0xec, 0x3e, 0xfd, 0xcc, 0x4c, 0xc1, 0x55, 0xc9, 0xca, 0x9e, 0x9c, 0xb2, 0xa1, 0xa3, 0xa4, 0xab, 0xb4, 0xb3, 0xc3, 0xbb, 0xc2, 0xcb, 0xba, 0xb1, 0xc4, 0xcd, 0x95, 0xad, 0x9b, 0xac, 0xbc, 0xaa, 0x9d, 0xa2, 0xb5, 0x9a, 0x54, 0x5d, 0x5b, 0xb6, 0xfb, 0x8e, 0x1c, 0x32, 0x21, 0x23, 0x24, 0x2b, 0x34, 0x33, 0x43, 0x3b, 0x42, 0x4b, 0x3a, 0x31, 0x44, 0x4d, 0x15, 0x2d, 0x1b, 0x2c, 0x3c, 0x2a, 0x1d, 0x22, 0x35, 0x1a, 0xd4, 0xdd, 0xdb, 0x0, 0xf1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 
};

volatile bool bufferEmpty = true;
char toWrite[CHAR_BUFFER_SIZE];
int readIndex = 0;
int writeIndex = 0;
unsigned long lastWrite = 0;


void enterScancode(char code) {
  bufferEmpty = false;
  lastWrite = millis();

  for (int i = 0; i < 10; ++i) {
    digitalWrite(DATA_PIN, code & 1);
    digitalWrite(CLOCK_PIN, LOW);
    digitalWrite(CLOCK_PIN, HIGH);
    code >>= 1;
  }
}

inline void appendScancode(char ch) {
  toWrite[writeIndex] = ch;
  writeIndex = (writeIndex + 1) % CHAR_BUFFER_SIZE;
}

inline void appendChar(char ch) {
  appendScancode(scancodes[ch]);
}


void registerRead() {
  bufferEmpty = true;
}

void resetComputer() {
  digitalWrite(CLOCK_PIN, HIGH);
  digitalWrite(DATA_PIN, LOW);
  digitalWrite(RESET_PIN, HIGH);
  delay(500);
  digitalWrite(RESET_PIN, LOW);
  bufferEmpty = true;
  readIndex = 0;
  writeIndex = 0;
}

void setup() {
  digitalWrite(CLOCK_PIN, HIGH);
  digitalWrite(DATA_PIN, LOW);
  digitalWrite(RESET_PIN, LOW);
  pinMode(CLOCK_PIN, OUTPUT);
  pinMode(DATA_PIN, OUTPUT);
  pinMode(RESET_PIN, OUTPUT);

  attachInterrupt(digitalPinToInterrupt(KEYBOARD_READ_PIN), registerRead, RISING);

  Serial.begin(9600);
}

void loop() {
  if (Serial.available() > 0) {
    char entered = Serial.read();
    if (entered == 0x01) {
      resetComputer();
    } else {
      if (entered == '\n') {
        appendChar('\n');
        appendScancode(0xf0);
      }
      appendChar(entered);
    }
  }

  if (bufferEmpty && writeIndex != readIndex && (millis() - lastWrite > WRITE_DELAY)) {
    char ch = toWrite[readIndex];
    readIndex = (readIndex + 1) % CHAR_BUFFER_SIZE;
    enterScancode(ch);
  }
}
